$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.function ==
int <CURSOR>|FUNCTION_NAME|()
{
<SPLIT>	return 0;
}
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.function-static ==
static void <CURSOR> |FUNCTION_NAME|()
{
<SPLIT>	return;
}
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.main ==
int main(int argc, char *argv[])
{<CURSOR>
<SPLIT>return 0;
}
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.enum ==
enum <CURSOR> {
<SPLIT>};
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.struct ==
struct <CURSOR> {
<SPLIT>};
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.Struct ==
struct |?STRUCT_NAME| {<CURSOR>
<SPLIT>};

typedef struct |STRUCT_NAME| |STRUCT_NAME:c|;
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.union ==
union <CURSOR> {
<SPLIT>};
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.Printf == insert ==
printf("%s|%d| <CURSOR>\n", __FILE__, __LINE__);
== idioms.printf == insert ==
printf("<CURSOR>\n");
== idioms.debug == insert ==
DBG("<CURSOR>\n");
== idioms.scanf == insert ==
scanf("<CURSOR>", &);
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.calloc ==
|?POINTER|	= calloc((size_t)(<CURSOR><+COUNT+>), sizeof(<+TYPE+>));
if (|POINTER|==NULL) {
	fprintf(stderr, "\ndynamic memory allocation failed\n");
	exit(EXIT_FAILURE);
}

free(|POINTER|);
|POINTER|	= NULL;

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.malloc ==
|?POINTER|	= malloc(sizeof(<CURSOR><+TYPE+>));
if (|POINTER|==NULL) {
	fprintf(stderr, "\ndynamic memory allocation failed\n");
	exit(EXIT_FAILURE);
}

free(|POINTER|);
|POINTER|	= NULL;

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.realloc ==
|?POINTER|	= realloc(|POINTER|, sizeof(<CURSOR><+TYPE+>));
if (|POINTER|==NULL) {
	fprintf(stderr, "\ndynamic memory reallocation failed\n");
	exit(EXIT_FAILURE);
}

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.sizeof == insert ==
sizeof(<CURSOR><SPLIT>)
== idioms.assert == insert ==
assert(<CURSOR><SPLIT>);
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.open-input-file ==
FILE	*|?FILEPOINTER|;										/* input-file pointer */
char	*|FILEPOINTER|_file_name = "<CURSOR>";		/* input-file name    */

|FILEPOINTER|	= fopen(|FILEPOINTER|_file_name, "r");
if (|FILEPOINTER| == NULL) {
	fprintf(stderr, "couldn't open file '%s'; %s\n",
			|FILEPOINTER|_file_name, strerror(errno));
	exit(EXIT_FAILURE);
}
<SPLIT>{-continue here-}
if (fclose(|FILEPOINTER|) == EOF) {			/* close input file   */
	fprintf(stderr, "couldn't close file '%s'; %s\n",
			|FILEPOINTER|_file_name, strerror(errno));
	exit(EXIT_FAILURE);
}

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.open-output-file ==
FILE	*|?FILEPOINTER|;										/* output-file pointer */
char	*|FILEPOINTER|_file_name = "<CURSOR>";		/* output-file name    */

|FILEPOINTER|	= fopen(|FILEPOINTER|_file_name, "w");
if (|FILEPOINTER| == NULL) {
	fprintf(stderr, "couldn't open file '%s'; %s\n",
			|FILEPOINTER|_file_name, strerror(errno));
	exit(EXIT_FAILURE);
}
<SPLIT>{-continue here-}
if (fclose(|FILEPOINTER|) == EOF) {			/* close output file   */
	fprintf(stderr, "couldn't close file '%s'; %s\n",
			|FILEPOINTER|_file_name, strerror(errno));
	exit(EXIT_FAILURE);
}

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.fprintf == insert ==
fprintf(|?FILEPOINTER|, "<CURSOR>\n", );
== idioms.fscanf == insert ==
fscanf(|?FILEPOINTER|, "<CURSOR>", &);
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.mysnip == insert ==
@begin=|?LANGUAGE|@
@end=|LANGUAGE|@
